# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'task2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
import time
import os

import scipy
from scipy import signal
from scipy.interpolate import interp1d

import csv

from pyqtgraph import PlotWidget, PlotItem
from PyQt5 import QtCore, QtGui, QtWidgets

import pyqtgraph as pg
import pandas as pd
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QVBoxLayout, QWidget, QPushButton, QLabel



class Ui_MainWindow(object):
    file_path = ""
    add_is_clicked=0
    files = []
    composerlist = []
    amplitudelist = []
    frquencylist = []
    magnitudelist = []
    phaselist = []
    composer_with_noise = []
    noisy_y=[]
    fmax=0
    csv_values_on_x_axis=0
    csv_values_on_y_axis=0

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(852, 509)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")



        # ...
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")

        # Add spacer on the left side of the first PlotWidget
        spacerItemLeft = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItemLeft)

        self.signal = PlotWidget(self.centralwidget)
        self.signal.setObjectName("signal")
        self.horizontalLayout.addWidget(self.signal)

        # Add spacer on the right side of the first PlotWidget
        spacerItemMiddle = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItemMiddle)

        self.reconstructed = PlotWidget(self.centralwidget)
        self.reconstructed.setObjectName("reconstructed")
        self.horizontalLayout.addWidget(self.reconstructed)
        self.verticalLayout_3.addLayout(self.horizontalLayout)

        # Spacer between the first and second PlotWidget
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_3.addItem(spacerItem1)

        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")

        # Add spacer on the left side of the second PlotWidget
        spacerItemLeft2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItemLeft2)

        self.difference = PlotWidget(self.centralwidget)
        self.difference.setObjectName("difference")
        self.horizontalLayout_5.addWidget(self.difference)


        self.verticalLayout_3.addLayout(self.horizontalLayout_5)
        self.gridLayout.addLayout(self.verticalLayout_3, 0, 1, 5, 1)

        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)


        self.samplefreq = QtWidgets.QSlider(self.centralwidget)
        self.samplefreq.setObjectName("samplefreq")
        self.horizontalLayout_4.addWidget(self.samplefreq)

        self.samplefreq_label = QtWidgets.QLabel(self.centralwidget)
        self.horizontalLayout_4.addWidget(self.samplefreq_label)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.samplefreq.sizePolicy().hasHeightForWidth())
        self.samplefreq.setSizePolicy(sizePolicy)
        self.samplefreq.setOrientation(QtCore.Qt.Horizontal)
        self.samplefreq.setMinimum(0)
        self.samplefreq.setMaximum(400)
        #
        # self.noiseslider = QtWidgets.QSlider(self.centralwidget)
        # sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        # sizePolicy.setHorizontalStretch(0)
        # sizePolicy.setVerticalStretch(0)
        # sizePolicy.setHeightForWidth(self.noiseslider.sizePolicy().hasHeightForWidth())
        # self.noiseslider.setSizePolicy(sizePolicy)
        # self.noiseslider.setOrientation(QtCore.Qt.Horizontal)
        # self.noiseslider.setObjectName("noiseslider")
        # self.verticalLayout_4.addWidget(self.noiseslider)

        self.gridLayout.addLayout(self.horizontalLayout_4, 1, 0, 1, 1)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_5.addWidget(self.label_4)

        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_5.addWidget(self.label_6)
        self.horizontalLayout_9.addLayout(self.verticalLayout_5)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem4)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")


        self.normal = QtWidgets.QCheckBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.normal.sizePolicy().hasHeightForWidth())
        self.normal.setSizePolicy(sizePolicy)
        self.normal.setObjectName("normal")
        self.verticalLayout_4.addWidget(self.normal)



        self.noiseslider = QtWidgets.QSlider(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.noiseslider.sizePolicy().hasHeightForWidth())
        self.noiseslider.setSizePolicy(sizePolicy)
        self.noiseslider.setOrientation(QtCore.Qt.Horizontal)
        self.noiseslider.setObjectName("noiseslider")
        self.verticalLayout_4.addWidget(self.noiseslider)


        self.horizontalLayout_9.addLayout(self.verticalLayout_4)
        self.gridLayout.addLayout(self.horizontalLayout_9, 2, 0, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.verticalLayout.addWidget(self.label_7)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.component = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.component.sizePolicy().hasHeightForWidth())
        self.component.setSizePolicy(sizePolicy)
        self.component.setObjectName("component")
        self.horizontalLayout_8.addWidget(self.component)
        self.remove = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.remove.sizePolicy().hasHeightForWidth())
        self.remove.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.remove.setFont(font)
        self.remove.setObjectName("remove")
        self.horizontalLayout_8.addWidget(self.remove)
        self.verticalLayout.addLayout(self.horizontalLayout_8)
        self.gridLayout.addLayout(self.verticalLayout, 3, 0, 1, 1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.browse = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.browse.sizePolicy().hasHeightForWidth())
        self.browse.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.browse.setFont(font)
        self.browse.setObjectName("browse")
        self.verticalLayout_2.addWidget(self.browse)
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_2.addWidget(self.label_8)
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.verticalLayout_2.addWidget(self.label_10)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.frequency = QtWidgets.QSpinBox(self.centralwidget)
        self.frequency.setObjectName("frequency")
        self.horizontalLayout_2.addWidget(self.frequency)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.amplitude = QtWidgets.QSpinBox(self.centralwidget)
        self.amplitude.setObjectName("amplitude")
        self.horizontalLayout_3.addWidget(self.amplitude)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_10.addWidget(self.label_12)
        self.phase = QtWidgets.QSpinBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.phase.sizePolicy().hasHeightForWidth())
        self.phase.setSizePolicy(sizePolicy)
        self.phase.setObjectName("phase")
        self.horizontalLayout_10.addWidget(self.phase)
        self.verticalLayout_2.addLayout(self.horizontalLayout_10)
        self.addmix = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.addmix.sizePolicy().hasHeightForWidth())
        self.addmix.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.addmix.setFont(font)
        self.addmix.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.addmix.setObjectName("addmix")
        self.verticalLayout_2.addWidget(self.addmix)
        self.savemix = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.savemix.sizePolicy().hasHeightForWidth())
        self.savemix.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.savemix.setFont(font)
        self.savemix.setObjectName("savemix")
        self.verticalLayout_2.addWidget(self.savemix)
        self.gridLayout.addLayout(self.verticalLayout_2, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 852, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)



        # Set dark theme stylesheet for central widget
        self.centralwidget.setStyleSheet("background-color: #1E1E1E; color: #FFFFFF;")

        # Set dark theme stylesheet for PlotWidgets
        plot_stylesheet = "background-color: #3E3E3E; border: 1px solid #555555;"
        self.signal.setStyleSheet(plot_stylesheet)
        self.reconstructed.setStyleSheet(plot_stylesheet)
        self.difference.setStyleSheet(plot_stylesheet)

        # Set dark theme stylesheet for other widgets
        dark_stylesheet = "background-color: #2E2E2E; color: #FFFFFF; border: 1px solid #555555;"
        # Set dark blue background color for buttons with rounded edges
        button_size = "min-width: 100px; max-width: 200px; min-height: 35px; max-height: 35px;"
        button_style = f"QPushButton {{ {button_size} background-color: #1e90ff; color: #ffffff; border-radius: 10px; margin-left: 70px; margin-right: 70px; }}"
        self.browse.setStyleSheet(button_style)
        self.savemix.setStyleSheet(button_style)
        self.addmix.setStyleSheet(button_style)

        button2_style = f"QPushButton {{ {button_size} background-color: #1e90ff; color: #ffffff; border-radius: 10px; }}"
        self.remove.setStyleSheet(button2_style)

        # Set dark blue background color for PlotWidgets
        plot_style = "background-color: #1e90ff;"
        self.signal.setStyleSheet(plot_style)
        self.reconstructed.setStyleSheet(plot_style)
        self.difference.setStyleSheet(plot_style)

        # Set black background color for spin boxes and sliders with white text
        input_style = "background-color: #000000; color: #ffffff; border-radius: 5px;"
        self.samplefreq.setStyleSheet(input_style)
        self.noiseslider.setStyleSheet(input_style)
        self.frequency.setStyleSheet(input_style)
        self.amplitude.setStyleSheet(input_style)
        self.phase.setStyleSheet(input_style)

        combo_style = "background-color: #000000; color: #FFFFFF; border-radius: 5px; min-width: 100px; min-height: 30px;"
        self.component.setStyleSheet(combo_style)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.default()






        self.browse.clicked.connect(self.open_file)
        self.savemix.clicked.connect(self.savemixer)
        self.addmix.clicked.connect(self.handle_addmix)
        self.remove.clicked.connect(self.handle_remove)
        self.normal.toggled.connect(self.handle_act)
        self.samplefreq.valueChanged.connect(self.handle_sample)

        self.noiseslider.valueChanged.connect(lambda value: self.handle_noiseslider(self.file_path))

        self.frequency.valueChanged.connect(self.edit_composer)
        self.phase.valueChanged.connect(self.edit_composer)
        self.amplitude.valueChanged.connect(self.edit_composer)
        #
        # self.slider_label = QLabel("Slider Value: 0", self)
        # self.slider_label.setGeometry(150, 50, 100, 50)
        #
        # self.label=self.samplefreq.value()
        # self.samplefreq_label.setText(str(self.label))
        #




    def handle_addmix(self):
        self.plot()
        self.reconstruct_composer()


    def handle_remove(self):
        self.removeselected()
        self.reconstruct_composer()



    def handle_sample(self,value):
        # self.slider_label.setText(f"Slider Value: {value}")

        # self.samplefreq_label.setText(str(value))
        # self.samplefreq_label.setAlignment(QtCore.Qt.AlignCenter)

        if self.add_is_clicked==1:
            self.reconstruct_composer()
        else:
            self.reconstruct_csv()

    def handle_act(self):
        if self.add_is_clicked == 1:
            self.reconstruct_composer()
        else:
            self.reconstruct_csv()

    def handle_noiseslider(self,file_path):
        if self.add_is_clicked == 1:
            self.add_gaussian_noise()
            self.reconstruct_composer()
        else:
            self.add_gaussian_noise_to_file(file_path)
            self.reconstruct_csv()


    def default(self):
        self.add_is_clicked=1
        self.signal.clear()
        self.reconstructed.clear()
        self.difference.clear()
        magnitude = 1
        phase = 1
        Frequency = 1
        self.frequency.setValue(1)
        self.phase.setValue(1)
        self.amplitude.setValue(1)
        samplingFrequency = 1000  # 1000 sample
        samplingInterval = 1 / samplingFrequency  # Calculate the time step
        self.time = np.arange(0, 1, samplingInterval)  # 1000 values for time between 0 and 1
        pi = np.pi
        phi = phase * pi / 180
        amplitude = magnitude * (np.sin(2 * pi * Frequency * self.time + phi))
        self.signal.plot(self.time, amplitude)
        self.signal.plotItem.setTitle("original ")
        self.signal.plotItem.setLabel("bottom", text="Time (s)")
        self.signal.plotItem.setLabel("left", text="Amplitude(v)")

    def edit_composer(self):

        self.add_is_clicked = 1
        self.signal.clear()
        self.reconstructed.clear()
        self.difference.clear()
        magnitude = self.amplitude.value()
        phase = self.phase.value()
        Frequency = self.frequency.value()
        samplingFrequency = 1000  # 1000 sample
        samplingInterval = 1 / samplingFrequency  # Calculate the time step
        self.time = np.arange(0, 1, samplingInterval)  # 1000 values for time between 0 and 1
        pi = np.pi
        phi = phase * pi / 180
        new_amplitude = magnitude * (np.sin(2 * pi * Frequency * self.time + phi))
        # Check if amplitudelist is not empty
        if self.amplitudelist:
            # Replace the last element with the new amplitude
            self.amplitudelist[-1] = new_amplitude
        else:
            # If amplitudelist is empty, simply append the new amplitude
            self.amplitudelist.append(new_amplitude)

        self.composer = list(
            map(sum, zip(*self.amplitudelist)))


        self.signal.plot(self.time, self.composer)
        self.signal.plotItem.setTitle("original ")
        self.signal.plotItem.setLabel("bottom", text="Time (s)")
        self.signal.plotItem.setLabel("left", text="Amplitude(v)")

        self.add_gaussian_noise()
        self.reconstruct_composer()

        #

    def removeselected(self):  # Delete combobox
        self.add_is_clicked = 1

        x = self.component.currentIndex()
        if x >= 0:
            # Remove the item from the combobox
            self.component.removeItem(x)

            # Remove corresponding values from the lists
            del self.amplitudelist[x]
            del self.frquencylist[x]
            del self.magnitudelist[x]
            del self.phaselist[x]

            f = self.frquencylist[- 1]
            m = self.magnitudelist[- 1]
            p = self.phaselist[- 1]
            # Set the previous values in the SpinBoxes
            self.frequency.setValue(f)
            self.amplitude.setValue(m)
            self.phase.setValue(p)

            self.reconstructed.clear()
            self.difference.clear()

            self.composer = list(map(sum, zip(*self.amplitudelist)))
            #
            self.add_gaussian_noise()
            self.reconstruct_composer()


            # Redraw the signal with the updated composer
            self.signal.plot(self.time, self.composer)
            self.signal.plotItem.setTitle("original ")
            self.signal.plotItem.setLabel("bottom", text="Time (s)")
            self.signal.plotItem.setLabel("left", text="Amplitude(v)")
            # Add Gaussian noise and reconstruct the composer

    def savemixer(self):
        timestamp = time.strftime("%Y%m%d%H%M%S")
        filename = "signal_" + timestamp + ".csv"

        with open(filename, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['time', 'amplitude'])
            for t, signal in zip(self.time, self.composer):
                writer.writerow([t, signal])

        # Move the saved file to the project folder
        current_dir = os.getcwd()
        destination = os.path.join(current_dir, filename)
        os.rename(filename, destination)

        print("Signal saved to CSV file:", destination)

    def plot(self):
        self.add_is_clicked = 1
        self.reconstructed.clear()
        self.difference.clear()
        magnitude = self.amplitude.value()
        phase = self.phase.value()
        Frequency = self.frequency.value()
        self.frquencylist.append(Frequency)
        self.magnitudelist.append(magnitude)
        self.phaselist.append(phase)
        samplingFrequency = 1000  # 1000 sample
        samplingInterval = 1 / samplingFrequency  # Calculate the time step
        self.time = np.arange(0, 1, samplingInterval)  # 1000 values for time between 0 and 1
        pi = np.pi
        phi = phase * pi / 180
        amplitude = magnitude * (np.sin(2 * pi * Frequency * self.time + phi))
        self.amplitudelist.append(amplitude)  # The y values for each signal is stored in a list
        self.add_gaussian_noise()
        self.reconstruct_composer()
        self.component.addItem(
            "Freq: " + str(self.frequency.value()) + "/" + "Mag: " + str(self.amplitude.value()) + "/" +
            "/ph: " + str(self.phase.value()))


    def reconstruct_composer(self):
        self.signal.clear()
        self.reconstructed.clear()
        self.difference.clear()
        factor = int(self.samplefreq.value())
        fs = int(factor)

        if self.normal.isChecked():
            self.maxfrequency = max(self.frquencylist)
            self.label = str(factor / self.maxfrequency) + "fmax"
            self.samplefreq_label.setText(str(self.label))



        else:

            self.label= str(factor)
            self.samplefreq_label.setText(str(self.label))


        if fs == 0:
            self.difference.clear()
            self.reconstructed.clear()
            self.signal.plot(self.time, self.composer_with_noise)

            self.range = self.signal.getViewBox().viewRange()




        else:
            ts = 1 / fs
            ynew = scipy.signal.resample(self.composer_with_noise, fs)  # amplitude samples

            tnew = np.arange(0, 1, 1 / fs)  # time samples

            self.signal.clear()
            self.signal.plot(self.time, self.composer_with_noise)
            self.signal.plot(tnew, ynew, pen=None, symbol='o')
            y_reconstructed = 0  # initial value
            for index in range(0, len(tnew)):
                y_reconstructed += ynew[index] * np.sinc(
                    (np.array(self.time) - ts * index) / ts)  # The reconstruction Formula
            self.reconstructed.plot(self.time, y_reconstructed, pen=pg.mkPen('r'))

            difference = np.array(self.composer) - y_reconstructed
            self.difference.plot(self.time, difference, pen=pg.mkPen('g'))
            self.difference.plotItem.setYRange(-2, 2)

    def add_gaussian_noise(self):
        noise_std = self.noiseslider.value() / 100.0  # Get the value of the noise slider
        self.composer_with_noise = self.composer + np.random.normal(0, noise_std, len(self.time))



    def open_file(self):
        self.add_is_clicked=0
        self.signal.clear()
        self.reconstructed.clear()
        self.difference.clear()
        self.component.clear()

        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()", "",
                                                  "All Files (*);;csv Files (*.csv)", options=options)
        if fileName:
            self.signal.clear()
            self.noisy_y = []
            self.composer = []  # Clear the composer-related data
            self.composer_with_noise=[]
            self.amplitudelist = []
            self.frquencylist = []
            self.magnitudelist = []
            self.phaselist = []
            self.frequency.setValue(0)
            self.amplitude.setValue(0)
            self.phase.setValue(0)

            self.file_path = fileName

            self.read_file(fileName)


    def read_file(self, file_path):
        self.add_is_clicked=0

        self.signal.clear()
        self.reconstructed.clear()
        self.difference.clear()
        self.component.clear()
        self.samplefreq.setValue(0)
        self.noiseslider.setValue(0)

        path = file_path
        data = pd.read_csv(path)
        time_column = data.values[:, 0]

        self.fmax = int(1 /(2* ((time_column[3] - time_column[2]))))

        # Select data for one second (adjust the time range as needed)
        ten_second_data = data[(time_column >= 0) & (time_column <= 1.95)]
        self.csv_values_on_x_axis = ten_second_data.values[:, 0]
        self.csv_values_on_y_axis = ten_second_data.values[:, 1]
        self.reconstruct_csv()
        self.add_gaussian_noise_to_file(path)
        self.handle_noiseslider(path)
        self.signal.plot(self.csv_values_on_x_axis, self.csv_values_on_y_axis)
        print(self.fmax)





    def reconstruct_csv(self):
        self.signal.clear()
        self.reconstructed.clear()
        self.difference.clear()

        factor = int(self.samplefreq.value())
        fs = int(factor)

        if self.normal.isChecked():
            self.label = str(factor / self.fmax) + "fmax"
            self.samplefreq_label.setText(str(self.label))

        else:

            self.label = str(factor)
            self.samplefreq_label.setText(str(self.label))


        if fs == 0:
            self.reconstructed.clear()
            self.difference.clear()
            self.signal.plotItem.setTitle("original ")
            self.signal.plotItem.setLabel("bottom", text="Time (s)")
            self.signal.plotItem.setLabel("left", text="Amplitude(v)")
            self.signal_viewbox = self.signal.plotItem.getViewBox()
            self.signal_viewbox.setMouseMode(pg.ViewBox.PanMode)
            self.signal_viewbox.setXRange(0, 1)

            self.signal.plot(self.csv_values_on_x_axis, self.noisy_y)
        else:
            ts = 1 / fs

            tnew = np.arange(0, (1.95+(1/fs)), step=1 / fs, dtype=float)
            ynew = np.interp(tnew, self.csv_values_on_x_axis, self.noisy_y)


            self.signal.plotItem.setTitle("original ")
            self.signal.plotItem.setLabel("bottom", text="Time (s)")
            self.signal.plotItem.setLabel("left", text="Amplitude(v)")

            self.signal_viewbox = self.signal.plotItem.getViewBox()
            self.signal_viewbox.setMouseMode(pg.ViewBox.PanMode)
            self.signal_viewbox.setXRange(0,1)

            self.signal.plot(self.csv_values_on_x_axis, self.noisy_y)
            self.signal.plot(tnew, ynew, pen=None, symbol="o")
            y_reconstructed=0

            for index in range(0, len(tnew)):
                y_reconstructed += ynew[index] * np.sinc((np.array(self.csv_values_on_x_axis) - ts * index) / ts)

            self.reconstructed.plotItem.setTitle("reconstructed ")
            self.reconstructed.plotItem.setLabel("bottom", text="Time (s)")
            self.reconstructed.plotItem.setLabel("left", text="Amplitude(v)")
            self.reconstructed_viewbox = self.reconstructed.plotItem.getViewBox()
            self.reconstructed_viewbox.setMouseMode(pg.ViewBox.PanMode)
            self.reconstructed_viewbox.setXRange(0, 1)

            self.reconstructed.plot(self.csv_values_on_x_axis, y_reconstructed, pen=pg.mkPen('r'))

            difference = np.array(self.csv_values_on_y_axis) - y_reconstructed
            self.difference.plotItem.setTitle("difference ")
            self.difference.plotItem.setLabel("bottom", text="Time (s)")
            self.difference.plotItem.setLabel("left", text="Amplitude(v)")
            self.difference_viewbox = self.difference.plotItem.getViewBox()
            self.difference_viewbox.setMouseMode(pg.ViewBox.PanMode)
            self.difference_viewbox.setXRange(0,1)
            self.difference.plot(self.csv_values_on_x_axis, difference, pen=pg.mkPen('g'))
            self.difference.plotItem.setYRange(-1, 1)

    def add_gaussian_noise_to_file(self, file_path):
            noise_std = self.noiseslider.value() / 100.0  # Get the value of the noise slider

            # Read data from file
            data = pd.read_csv(file_path)
            time_column = data.values[:, 0]
            amplitude_column = data.values[:, 1]

            # Select data for one second (adjust the time range as needed)
            ten_second_data = data[(time_column >= 0) & (time_column <= 1.95)]

            x = ten_second_data.values[:, 0]
            y = ten_second_data.values[:, 1]

            # Add Gaussian noise to the amplitude values
            self.noisy_y = y + np.random.normal(0, noise_std, len(y))





    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "sample frequency"))
        self.label_4.setText(_translate("MainWindow", "Normalized"))
        self.label_6.setText(_translate("MainWindow", "Noise"))
        self.label_7.setText(_translate("MainWindow", "Choose component"))
        self.remove.setText(_translate("MainWindow", "Remove"))
        self.browse.setText(_translate("MainWindow", "Browse"))
        self.label_8.setText(_translate("MainWindow", "                         OR"))
        self.label_10.setText(_translate("MainWindow", "                Signal mixer"))
        self.label.setText(_translate("MainWindow", "frequency"))
        self.label_2.setText(_translate("MainWindow", "Amplitude"))
        self.label_12.setText(_translate("MainWindow", "Phase"))
        self.addmix.setText(_translate("MainWindow", "Add"))
        self.savemix.setText(_translate("MainWindow", "save"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
